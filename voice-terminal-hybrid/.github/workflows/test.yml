name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  FORCE_COLOR: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          mkdir -p tmp/test-dbs
          mkdir -p tmp/test-files
          mkdir -p tmp/test-logs

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run type checking
        run: npm run check

      - name: Run unit tests
        run: npm run test
        env:
          TEST_DB_PATH: ./tmp/test-dbs
          LOG_LEVEL: error

      - name: Run database tests
        run: npm run test:db
        env:
          TEST_DB_PATH: ./tmp/test-dbs

      - name: Run ingestion tests
        run: npm run test:ingestion
        env:
          TEST_DB_PATH: ./tmp/test-dbs
          TEST_FILES_PATH: ./tmp/test-files

      - name: Run sync tests
        run: npm run test:sync
        env:
          TEST_DB_PATH: ./tmp/test-dbs

      - name: Run security tests
        run: npm run test:security
        env:
          TEST_DB_PATH: ./tmp/test-dbs

      - name: Run integration tests
        run: npm run test:integration
        env:
          TEST_DB_PATH: ./tmp/test-dbs
          TEST_FILES_PATH: ./tmp/test-files

      - name: Run stress tests
        run: npm run test:stress
        env:
          TEST_DB_PATH: ./tmp/test-dbs
          TEST_TIMEOUT: 60000
        continue-on-error: true

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          TEST_DB_PATH: ./tmp/test-dbs

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            tmp/test-logs/
            vitest-report.html
          retention-days: 30

      - name: Cleanup test environment
        if: always()
        run: |
          rm -rf tmp/test-dbs
          rm -rf tmp/test-files
          rm -rf tmp/test-logs

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run test:performance
        env:
          TEST_DB_PATH: ./tmp/perf-dbs
          BENCHMARK_DURATION: 30000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run security tests
        run: npm run test:security
        env:
          TEST_DB_PATH: ./tmp/security-dbs

      - name: Check for vulnerabilities
        run: |
          npx better-npm-audit audit --level moderate
        continue-on-error: true

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          npm run build
          npm run preview &
          sleep 10
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          TEST_DB_PATH: ./tmp/e2e-dbs

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  compatibility:
    name: Database Compatibility
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        database: ['sqlite', 'postgresql']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Start PostgreSQL
        if: matrix.database == 'postgresql'
        run: |
          sudo systemctl start postgresql.service
          sudo -u postgres createuser --createdb --pwprompt test_user || true
          sudo -u postgres createdb test_db || true

      - name: Install dependencies
        run: npm ci

      - name: Run database compatibility tests
        run: npm run test:db
        env:
          DATABASE_TYPE: ${{ matrix.database }}
          TEST_DB_PATH: ./tmp/compat-dbs
          POSTGRES_URL: postgresql://test_user:password@localhost:5432/test_db

      - name: Upload compatibility results
        uses: actions/upload-artifact@v3
        with:
          name: compatibility-${{ matrix.database }}
          path: compatibility-results.json
          retention-days: 30

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check build artifacts
        run: |
          ls -la dist/
          file dist/* || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, performance, security, e2e, compatibility, build]
    if: always()

    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "‚úÖ All tests passed successfully!"
          echo "Coverage threshold met, security checks passed, build successful."

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Test suite failed!"
          echo "Please check the logs and fix any failing tests."
          exit 1

      - name: Notify on performance regression
        if: needs.performance.result == 'failure'
        run: |
          echo "‚ö†Ô∏è Performance regression detected!"
          echo "Please review performance test results."

      - name: Notify on security issues
        if: needs.security.result == 'failure'
        run: |
          echo "üîí Security issues detected!"
          echo "Please address security vulnerabilities before merging."