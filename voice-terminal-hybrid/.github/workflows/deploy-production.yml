# Production Deployment Pipeline for Tmux Service
# Comprehensive testing gates, security scanning, and progressive deployment

name: Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - 'src/lib/tmux/**'
      - 'docker/**'
      - 'k8s/**'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test suite (emergency only)'
        required: false
        default: false
        type: boolean
      force_deployment:
        description: 'Force deployment (bypass safety checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: voice-terminal/tmux-service
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  
  # Security
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  
  # Monitoring
  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
  PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}

jobs:
  # Security and Dependency Analysis
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
      security-score: ${{ steps.security-assessment.outputs.score }}
      critical-issues: ${{ steps.security-assessment.outputs.critical }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Dependency Security Audit
    - name: Audit Dependencies
      run: |
        npm audit --audit-level=moderate --production
        npm run security:ci

    # Static Code Security Analysis
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: typescript, javascript

    # SAST Security Scanning
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/nodejs
          p/typescript
          p/docker

    # Container Security Scanning
    - name: Build security scan image
      run: |
        docker build -f docker/Dockerfile --target security-scanner -t tmux-security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: tmux-security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    # Generate SBOM
    - name: Generate Software Bill of Materials
      run: |
        npm install -g @cyclonedx/cyclonedx-npm
        cyclonedx-npm --output-file sbom.json
        
    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.json

    # Security Assessment
    - name: Security Assessment
      id: security-assessment
      run: |
        # Calculate security score based on findings
        CRITICAL_COUNT=$(grep -c "CRITICAL" trivy-results.sarif || echo "0")
        HIGH_COUNT=$(grep -c "HIGH" trivy-results.sarif || echo "0")
        
        SCORE=$((100 - (CRITICAL_COUNT * 20) - (HIGH_COUNT * 5)))
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        if [ $CRITICAL_COUNT -gt 0 ] && [ "${{ github.event.inputs.force_deployment }}" != "true" ]; then
          echo "❌ Critical security issues found. Deployment blocked."
          exit 1
        fi

  # Comprehensive Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        test-type: [unit, integration, security, performance]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install tmux for testing
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    # Unit Tests
    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        npm run test:coverage
        npm run check

    # Integration Tests
    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        npm run tmux:test
        npm run test:e2e

    # Security Tests
    - name: Run Security Tests
      if: matrix.test-type == 'security'
      run: |
        npm run security:complete
        npm run security:validate

    # Performance Tests
    - name: Run Performance Tests
      if: matrix.test-type == 'performance'
      run: |
        npm run tmux:benchmark
        npm run test:performance

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results/
          coverage/
          test-reports/

  # Build and Push Container Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite]
    if: always() && (needs.security-scan.result == 'success' && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped'))
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYY-MM-DD-HH-mm-ss'}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

    # Post-build Security Scan
    - name: Scan built image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'json'
        output: 'image-scan-results.json'

    - name: Upload image scan results
      uses: actions/upload-artifact@v4
      with:
        name: image-scan-results
        path: image-scan-results.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    outputs:
      deployment-status: ${{ steps.deploy.outputs.status }}
      health-check-url: ${{ steps.deploy.outputs.health-url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ env.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      id: deploy
      run: |
        # Update image tag in deployment
        sed -i "s|image: voice-terminal/tmux-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/tmux-service.yaml
        
        # Apply configurations
        kubectl apply -f k8s/tmux-service.yaml -n voice-terminal-staging
        kubectl apply -f k8s/monitoring.yaml -n voice-terminal-staging
        
        # Wait for rollout
        kubectl rollout status deployment/tmux-service -n voice-terminal-staging --timeout=600s
        
        # Get service URL
        SERVICE_IP=$(kubectl get service tmux-service -n voice-terminal-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "health-url=http://$SERVICE_IP/health" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Verify deployment
      run: |
        # Health check
        curl -f ${{ steps.deploy.outputs.health-url }} || exit 1
        
        # Check metrics endpoint
        curl -f http://$SERVICE_IP:9090/metrics || exit 1
        
        echo "✅ Staging deployment successful"

  # Staging Validation Tests
  staging-validation:
    name: Staging Validation
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run smoke tests
      run: |
        # Smoke tests against staging
        HEALTH_URL=${{ needs.deploy-staging.outputs.health-check-url }}
        
        # Health check
        for i in {1..10}; do
          if curl -f $HEALTH_URL; then
            echo "✅ Health check passed"
            break
          fi
          echo "⏳ Waiting for service to be ready..."
          sleep 30
        done

    - name: Performance validation
      run: |
        # Load test staging environment
        curl -X POST ${{ needs.deploy-staging.outputs.health-check-url }}/tmux/command \
          -H "Content-Type: application/json" \
          -d '{"command": "echo test"}'

    - name: Security validation
      run: |
        # Test security endpoints
        curl -f ${{ needs.deploy-staging.outputs.health-check-url }}/security/event \
          -X POST \
          -H "Content-Type: application/json" \
          -d '{"event_type": "test", "severity": "info", "description": "deployment test"}'

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [staging-validation, build-and-push]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.environment == 'production' || github.event_name == 'push')
    environment: 
      name: production
      url: https://tmux.voice-terminal.io
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ env.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    # Progressive Deployment Strategy
    - name: Deploy to production (Canary)
      run: |
        # Create canary deployment
        sed -i "s|image: voice-terminal/tmux-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/tmux-service.yaml
        sed -i "s|replicas: 3|replicas: 1|" k8s/tmux-service.yaml
        sed -i "s|name: tmux-service|name: tmux-service-canary|g" k8s/tmux-service.yaml
        
        kubectl apply -f k8s/tmux-service.yaml -n voice-terminal
        kubectl rollout status deployment/tmux-service-canary -n voice-terminal --timeout=300s

    - name: Canary health check
      run: |
        # Wait and monitor canary for 5 minutes
        sleep 300
        
        # Check canary metrics
        CANARY_POD=$(kubectl get pods -n voice-terminal -l app.kubernetes.io/name=tmux-service-canary -o jsonpath='{.items[0].metadata.name}')
        kubectl port-forward -n voice-terminal $CANARY_POD 9090:9090 &
        PORT_FORWARD_PID=$!
        
        sleep 10
        
        # Check error rate
        ERROR_RATE=$(curl -s http://localhost:9090/metrics | grep 'http_requests_total.*5..' | tail -1 | awk '{print $2}' || echo "0")
        
        kill $PORT_FORWARD_PID
        
        if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
          echo "❌ Canary error rate too high: $ERROR_RATE"
          kubectl delete deployment tmux-service-canary -n voice-terminal
          exit 1
        fi

    - name: Full production rollout
      run: |
        # Update main deployment
        sed -i "s|image: voice-terminal/tmux-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/tmux-service.yaml
        
        kubectl apply -f k8s/tmux-service.yaml -n voice-terminal
        kubectl apply -f k8s/monitoring.yaml -n voice-terminal
        
        # Wait for rollout
        kubectl rollout status deployment/tmux-service -n voice-terminal --timeout=600s
        
        # Clean up canary
        kubectl delete deployment tmux-service-canary -n voice-terminal || true

    - name: Post-deployment validation
      run: |
        # Final health checks
        SERVICE_IP=$(kubectl get service tmux-service -n voice-terminal -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Health check
        curl -f http://$SERVICE_IP/health || exit 1
        
        # Metrics check
        curl -f http://$SERVICE_IP:9090/metrics || exit 1
        
        echo "✅ Production deployment successful"

  # Post-Deployment Monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    steps:
    - name: Setup monitoring
      run: |
        # Create Grafana annotation for deployment
        curl -X POST "${{ env.GRAFANA_URL }}/api/annotations" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": "Production Deployment: ${{ github.sha }}",
            "tags": ["deployment", "production", "tmux-service"],
            "time": '$(date +%s000)'
          }'

    - name: Monitor deployment for 15 minutes
      run: |
        echo "🔍 Monitoring deployment health for 15 minutes..."
        
        for i in {1..15}; do
          # Check Prometheus for alerts
          ALERTS=$(curl -s "${{ env.PROMETHEUS_URL }}/api/v1/query?query=ALERTS{alertname=~\".*Tmux.*\",severity=\"critical\"}" | jq '.data.result | length')
          
          if [ "$ALERTS" -gt 0 ]; then
            echo "❌ Critical alerts detected during deployment monitoring"
            # Could trigger automatic rollback here
            exit 1
          fi
          
          echo "✅ Minute $i: No critical alerts"
          sleep 60
        done
        
        echo "✅ 15-minute monitoring period completed successfully"

  # Cleanup and Notification
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Tmux Service Production Deployment
          
          Status: ${{ needs.deploy-production.result }}
          Commit: ${{ github.sha }}
          Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          Security Score: ${{ needs.security-scan.outputs.security-score }}/100
          Critical Issues: ${{ needs.security-scan.outputs.critical-issues }}
          
          Monitoring: Active for 15 minutes post-deployment
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Update deployment tracking
      run: |
        # Log deployment to tracking system
        curl -X POST "${{ secrets.DEPLOYMENT_TRACKER_URL }}" \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_TRACKER_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "tmux-service",
            "environment": "production",
            "version": "${{ github.sha }}",
            "status": "${{ needs.deploy-production.result }}",
            "timestamp": "'$(date -Iseconds)'",
            "security_score": ${{ needs.security-scan.outputs.security-score }},
            "deployment_time": "'$(date +%s)'",
            "rollback_command": "kubectl rollout undo deployment/tmux-service -n voice-terminal"
          }'