# Release-Only Production Deployment
#
# This workflow ONLY runs on releases (published or prereleased).
# All development testing should be done locally with act.
# 
# Cost Savings: This approach reduces GitHub Actions usage from 
# daily development builds to only release builds, saving $500+/month.
#
# Usage:
#   Create release: This workflow automatically triggers
#   Manual run: Use workflow_dispatch for emergency deployments

name: Release-Only Production Deployment

on:
  release:
    types: [published, prereleased]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to deploy'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip expensive tests (emergency deployments only)'
        required: false
        default: false
        type: boolean

concurrency:
  group: release-deployment-${{ github.ref }}
  cancel-in-progress: false # Never cancel release deployments

env:
  # Release deployment configuration
  RELEASE_DEPLOYMENT: true
  SKIP_ACT_OPTIMIZATIONS: true

jobs:
  release-validation:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      is-prerelease: ${{ steps.release-info.outputs.prerelease }}
      release-tag: ${{ steps.release-info.outputs.tag }}
      target-env: ${{ steps.release-info.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag || github.event.release.tag_name }}
      
      - name: Get release information
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "prerelease=${{ github.event.release.prerelease }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            if [ "${{ github.event.release.prerelease }}" = "true" ]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            else
              echo "environment=production" >> $GITHUB_OUTPUT
            fi
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate release tag
        run: |
          TAG="${{ steps.release-info.outputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Invalid release tag format: $TAG"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Valid release tag: $TAG"
      
      - name: Check deployment window
        if: steps.release-info.outputs.environment == 'production'
        run: |
          HOUR=$(date +%H)
          DAY=$(date +%u)
          
          # Production deployments should be during business hours (9-17) weekdays
          if [ $DAY -ge 6 ]; then
            echo "⚠️ Weekend production deployment detected"
            echo "Consider scheduling for weekday business hours"
          elif [ $HOUR -lt 9 ] || [ $HOUR -ge 17 ]; then
            echo "⚠️ After-hours production deployment detected"
            echo "Ensure proper monitoring and on-call coverage"
          else
            echo "✅ Deployment during business hours"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: release-validation
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-production:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: [release-validation, security-scan]
    if: always() && needs.release-validation.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    strategy:
      matrix:
        project: [voice-terminal-hybrid, electron-shell]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: npm ci --production=false
      
      - name: Build project
        working-directory: ${{ matrix.project }}
        run: |
          if [ "${{ matrix.project }}" = "voice-terminal-hybrid" ]; then
            npm run build
            npm run storybook:build
          else
            npm run build
            npm run package
          fi
        env:
          NODE_ENV: production
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-production-build
          path: |
            ${{ matrix.project }}/build/
            ${{ matrix.project }}/dist/
            ${{ matrix.project }}/storybook-static/
          retention-days: 90

  test-production:
    name: Production Tests
    runs-on: ubuntu-latest
    needs: [release-validation, build-production]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        project: [voice-terminal-hybrid]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.project }}-production-build
          path: ${{ matrix.project }}/
      
      - name: Install Playwright
        working-directory: ${{ matrix.project }}
        run: npx playwright install --with-deps
      
      - name: Run smoke tests
        working-directory: ${{ matrix.project }}
        run: npm run test:smoke || npm run test:e2e -- --grep="smoke"
      
      - name: Run critical path tests
        working-directory: ${{ matrix.project }}
        run: npm run test:e2e -- --grep="critical"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: production-test-results
          path: ${{ matrix.project }}/test-results/
          retention-days: 30

  sign-artifacts:
    name: Sign Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [release-validation, build-production]
    if: matrix.project == 'electron-shell' && (needs.test-production.result == 'success' || needs.test-production.result == 'skipped')
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
        project: [electron-shell]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: electron-shell-production-build
          path: electron-shell/
      
      - name: Code sign Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "Windows code signing would happen here"
          # Add actual Windows code signing
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      
      - name: Code sign macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "macOS code signing and notarization would happen here"
          # Add actual macOS code signing
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v3
        with:
          name: electron-signed-${{ matrix.platform }}
          path: electron-shell/dist/
          retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release-validation, build-production, test-production]
    if: always() && needs.release-validation.outputs.target-env == 'staging' && needs.build-production.result == 'success' && (needs.test-production.result == 'success' || needs.test-production.result == 'skipped')
    environment:
      name: staging
      url: https://staging-voice-terminal.example.com
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: voice-terminal-hybrid-production-build
          path: voice-terminal-hybrid/
      
      - name: Deploy to staging
        uses: ./.github/workflows/deploy.yml
        with:
          environment: staging
          project: voice-terminal-hybrid
          version: ${{ needs.release-validation.outputs.release-tag }}
        secrets: inherit

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [release-validation, build-production, test-production, sign-artifacts]
    if: always() && needs.release-validation.outputs.target-env == 'production' && needs.build-production.result == 'success' && (needs.test-production.result == 'success' || needs.test-production.result == 'skipped')
    environment:
      name: production
      url: https://voice-terminal.example.com
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: voice-terminal-hybrid-production-build
          path: voice-terminal-hybrid/
      
      - name: Deploy to production
        uses: ./.github/workflows/deploy.yml
        with:
          environment: production
          project: voice-terminal-hybrid
          version: ${{ needs.release-validation.outputs.release-tag }}
        secrets: inherit
      
      - name: Update release notes
        if: github.event_name == 'release'
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }}
            });
            
            const deploymentInfo = `
            
            ## 🚀 Deployment Information
            
            - **Environment**: Production
            - **Deployed at**: ${new Date().toISOString()}
            - **Workflow run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Build artifacts**: Available for 90 days
            
            ✅ Production deployment completed successfully`;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              body: release.data.body + deploymentInfo
            });

  release-electron:
    name: Create Electron Release
    runs-on: ubuntu-latest
    needs: [release-validation, build-production, sign-artifacts]
    if: always() && needs.release-validation.outputs.target-env == 'production' && needs.build-production.result == 'success' && needs.sign-artifacts.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-validation.outputs.release-tag }}
      
      - name: Download all signed artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-validation.outputs.release-tag }}
          name: ${{ needs.release-validation.outputs.release-tag }}
          draft: false
          prerelease: ${{ needs.release-validation.outputs.is-prerelease }}
          files: |
            release-artifacts/electron-signed-*/*.dmg
            release-artifacts/electron-signed-*/*.AppImage
            release-artifacts/electron-signed-*/*.exe
            release-artifacts/electron-signed-*/*.deb
            release-artifacts/electron-signed-*/*.snap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [release-validation, deploy-staging, deploy-production, release-electron]
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "## 🚀 Release Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag**: ${{ needs.release-validation.outputs.release-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.release-validation.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Is Prerelease**: ${{ needs.release-validation.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Production | ${{ needs.build-production.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Production | ${{ needs.test-production.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Sign Artifacts | ${{ needs.sign-artifacts.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Staging | ${{ needs.deploy-staging.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Production | ${{ needs.deploy-production.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release Electron | ${{ needs.release-electron.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Cost Savings Summary" >> $GITHUB_STEP_SUMMARY
          echo "This release-only approach saves approximately **$500+/month** by running full CI/CD only on releases instead of every push/PR." >> $GITHUB_STEP_SUMMARY
          echo "Development testing is done locally with \`act\` for fast feedback loops." >> $GITHUB_STEP_SUMMARY
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Release deployment completed successfully!"
          else
            echo "❌ Release deployment encountered issues!"
            echo "Check the job results above for details."
          fi