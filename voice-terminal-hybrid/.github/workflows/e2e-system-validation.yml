name: E2E System Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run full validation daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'critical'
        type: choice
        options:
          - critical
          - full
          - smoke
          - performance
          - reliability
      browser_matrix:
        description: 'Run cross-browser tests'
        required: false
        default: false
        type: boolean
      network_tests:
        description: 'Include network resilience tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_VERSION: '1.40.0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.set-matrix.outputs.test-matrix }}
      estimated-duration: ${{ steps.estimate.outputs.duration }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Determine test matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.test_type }}" == "full" || "${{ github.event_name }}" == "schedule" ]]; then
            echo "test-matrix=[\"SystemIntegrationTests\", \"BrowserCompatibilityTests\", \"NetworkResilienceTests\", \"MultiUserScenarios\", \"FailureRecoveryTests\"]" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.test_type }}" == "performance" ]]; then
            echo "test-matrix=[\"SystemIntegrationTests\", \"MultiUserScenarios\"]" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.test_type }}" == "reliability" ]]; then
            echo "test-matrix=[\"NetworkResilienceTests\", \"FailureRecoveryTests\"]" >> $GITHUB_OUTPUT
          else
            echo "test-matrix=[\"SystemIntegrationTests\"]" >> $GITHUB_OUTPUT
          fi
      
      - name: Estimate test duration
        id: estimate
        run: |
          # Estimate based on test type
          case "${{ github.event.inputs.test_type }}" in
            "full") echo "duration=45" >> $GITHUB_OUTPUT ;;
            "performance") echo "duration=20" >> $GITHUB_OUTPUT ;;
            "reliability") echo "duration=15" >> $GITHUB_OUTPUT ;;
            *) echo "duration=10" >> $GITHUB_OUTPUT ;;
          esac

  system-validation:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        test-suite: ${{ fromJson(needs.prepare.outputs.test-matrix) }}
        browser: ${{ github.event.inputs.browser_matrix == 'true' && fromJson('["chromium", "firefox", "webkit"]') || fromJson('["chromium"]') }}
        include:
          - test-suite: BrowserCompatibilityTests
            browser: chromium
            mobile: true
          - test-suite: NetworkResilienceTests
            network-conditions: true
    
    env:
      CI: true
      NODE_ENV: test
      PWDEBUG: 0
      PLAYWRIGHT_BROWSERS_PATH: 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Setup test environment
        run: |
          # Create test directories
          mkdir -p test-results/screenshots
          mkdir -p test-results/videos
          mkdir -p test-results/traces
          
          # Setup Redis for testing (if needed)
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
          
          # Setup tmux for testing
          sudo apt-get install -y tmux
      
      - name: Start application servers
        run: |
          # Build application
          npm run build
          
          # Start preview server in background
          npm run preview &
          echo $! > preview.pid
          
          # Wait for server to be ready
          npx wait-on http://localhost:4173 --timeout 30000
          
          # Start WebSocket proxy (if exists)
          if [ -f "src/lib/websocket/proxy-server.js" ]; then
            node src/lib/websocket/proxy-server.js &
            echo $! > ws-proxy.pid
          fi
          
          # Start tmux backend (if exists)
          if [ -f "src/lib/tmux/backend-server.js" ]; then
            node src/lib/tmux/backend-server.js &
            echo $! > tmux-backend.pid
          fi
      
      - name: Run E2E tests
        run: |
          # Set test-specific environment variables
          export BROWSER=${{ matrix.browser }}
          export TEST_SUITE=${{ matrix.test-suite }}
          
          if [[ "${{ matrix.network-conditions }}" == "true" ]]; then
            export ENABLE_NETWORK_TESTS=true
          fi
          
          if [[ "${{ matrix.mobile }}" == "true" ]]; then
            export ENABLE_MOBILE_TESTS=true
          fi
          
          # Run the specific test suite
          npx playwright test tests/e2e/${{ matrix.test-suite }}.ts \
            --browser=${{ matrix.browser }} \
            --workers=1 \
            --timeout=60000 \
            --retries=2 \
            --reporter=html,json,junit \
            --output-dir=test-results
      
      - name: Collect system metrics
        if: always()
        run: |
          # Collect system information
          echo "=== System Information ===" > test-results/system-info.txt
          uname -a >> test-results/system-info.txt
          cat /proc/meminfo | grep -E "(MemTotal|MemAvailable)" >> test-results/system-info.txt
          cat /proc/cpuinfo | grep "model name" | head -1 >> test-results/system-info.txt
          
          # Collect process information
          echo "=== Process Information ===" >> test-results/system-info.txt
          ps aux | grep -E "(node|chromium|firefox|webkit)" >> test-results/system-info.txt
          
          # Collect network information
          echo "=== Network Information ===" >> test-results/system-info.txt
          netstat -tlnp | grep -E ":(4173|8080|8081)" >> test-results/system-info.txt
      
      - name: Stop application servers
        if: always()
        run: |
          # Stop all background processes
          if [ -f "preview.pid" ]; then
            kill $(cat preview.pid) || true
            rm preview.pid
          fi
          if [ -f "ws-proxy.pid" ]; then
            kill $(cat ws-proxy.pid) || true
            rm ws-proxy.pid
          fi
          if [ -f "tmux-backend.pid" ]; then
            kill $(cat tmux-backend.pid) || true
            rm tmux-backend.pid
          fi
          
          # Kill any remaining processes
          pkill -f "node.*preview" || true
          pkill -f "node.*proxy" || true
          pkill -f "node.*backend" || true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30
      
      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos-${{ matrix.test-suite }}-${{ matrix.browser }}
          path: test-results/videos/
          retention-days: 7
      
      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots-${{ matrix.test-suite }}-${{ matrix.browser }}
          path: test-results/screenshots/
          retention-days: 7

  performance-analysis:
    needs: [prepare, system-validation]
    runs-on: ubuntu-latest
    if: always() && (github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'performance' || github.event_name == 'schedule')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: collected-results/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Analyze performance metrics
        run: |
          # Run performance analysis script
          node scripts/analyze-performance.js collected-results/ > performance-analysis.md
          
          # Generate performance trends (if historical data exists)
          if [ -f "performance-history.json" ]; then
            node scripts/generate-performance-trends.js >> performance-analysis.md
          fi
      
      - name: Upload performance analysis
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis
          path: performance-analysis.md

  security-validation:
    needs: system-validation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security tests
        run: |
          npm run security:complete
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report/

  accessibility-validation:
    needs: system-validation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Run accessibility tests
        run: |
          npx playwright test --grep="@accessibility" --reporter=html,json
      
      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: playwright-report/

  generate-final-report:
    needs: [prepare, system-validation, performance-analysis]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate comprehensive report
        run: |
          # Generate final validation report
          node scripts/generate-final-report.js all-results/ > system-validation-report.md
          
          # Create summary for GitHub
          node scripts/create-github-summary.js all-results/ > $GITHUB_STEP_SUMMARY
      
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: system-validation-report
          path: |
            system-validation-report.md
            system-validation-report.html
            system-validation-report.json
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('system-validation-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 E2E System Validation Results\n\n${report}`
            });
      
      - name: Set job status
        if: always()
        run: |
          # Determine overall success based on critical test results
          if grep -q "FAILED" system-validation-report.md; then
            echo "System validation failed - check the report for details"
            exit 1
          else
            echo "System validation passed successfully"
          fi

  notify-slack:
    needs: [generate-final-report]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'schedule' || github.event.inputs.test_type == 'full')
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#qa-automation'
          text: |
            E2E System Validation completed for ${{ github.repository }}
            Status: ${{ job.status }}
            Duration: ${{ needs.prepare.outputs.estimated-duration }} minutes
            Triggered by: ${{ github.event_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}