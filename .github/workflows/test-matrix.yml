# Test Matrix Execution - Optimized for local execution with act
#
# Usage with act (local execution):
#   Run simplified matrix:
#     act workflow_call -P ubuntu-latest=nektos/act-environments-ubuntu:18.04
#   
#   Run with specific project:
#     act workflow_call --input project=voice-terminal-hybrid
#
# Local optimization features:
#   - Reduced test matrix for faster execution
#   - Single browser/platform testing in act
#   - Simplified sharding for local development

name: Test Matrix Execution

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: 'Project to test (voice-terminal-hybrid, electron-shell)'

env:
  # Detect act execution
  ACT_EXECUTION: ${{ github.actor || 'false' }}

jobs:
  prepare-matrix:
    name: Prepare Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set test matrix
        id: set-matrix
        run: |
          if [ "${{ inputs.project }}" == "voice-terminal-hybrid" ]; then
            if [ "$ACT_EXECUTION" = "true" ]; then
              # Simplified matrix for act
              echo 'matrix={"include":[
                {"test-suite":"unit","runner":"ubuntu-latest","shard":"1/1"},
                {"test-suite":"e2e","runner":"ubuntu-latest","browser":"chromium"}
              ]}' >> $GITHUB_OUTPUT
            else
              # Full matrix for GitHub
              echo 'matrix={"include":[
                {"test-suite":"unit","runner":"ubuntu-latest","shard":"1/3"},
                {"test-suite":"unit","runner":"ubuntu-latest","shard":"2/3"},
                {"test-suite":"unit","runner":"ubuntu-latest","shard":"3/3"},
                {"test-suite":"e2e","runner":"ubuntu-latest","browser":"chromium"},
                {"test-suite":"e2e","runner":"ubuntu-latest","browser":"firefox"},
                {"test-suite":"e2e","runner":"ubuntu-latest","browser":"webkit"},
                {"test-suite":"accessibility","runner":"ubuntu-latest","browser":"chromium"},
                {"test-suite":"performance","runner":"ubuntu-latest","browser":"chromium"},
                {"test-suite":"visual","runner":"ubuntu-latest","browser":"chromium"}
              ]}' >> $GITHUB_OUTPUT
            fi
          elif [ "${{ inputs.project }}" == "electron-shell" ]; then
            if [ "$ACT_EXECUTION" = "true" ]; then
              # Simplified matrix for act
              echo 'matrix={"include":[
                {"os":"ubuntu-latest","node":"20","arch":"x64"}
              ]}' >> $GITHUB_OUTPUT
            else
              # Full matrix for GitHub
              echo 'matrix={"include":[
                {"os":"ubuntu-latest","node":"18","arch":"x64"},
                {"os":"ubuntu-latest","node":"20","arch":"x64"},
                {"os":"windows-latest","node":"20","arch":"x64"},
                {"os":"macos-latest","node":"20","arch":"x64"},
                {"os":"macos-latest","node":"20","arch":"arm64"}
              ]}' >> $GITHUB_OUTPUT
            fi
          fi
  
  parallel-tests:
    name: ${{ matrix.test-suite || matrix.os }} - ${{ matrix.shard || matrix.node }}
    needs: prepare-matrix
    runs-on: ${{ matrix.runner || matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node || '20' }}
          cache: ${{ github.actor != 'nektos/act' && 'npm' || '' }}
          cache-dependency-path: ${{ github.actor != 'nektos/act' && format('{0}/package-lock.json', inputs.project) || '' }}
      
      - name: Cache node_modules for local execution
        if: github.actor == 'nektos/act'
        uses: actions/cache@v3
        with:
          path: ${{ inputs.project }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', inputs.project)) }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Restore npm cache (GitHub only)
        if: github.actor != 'nektos/act'
        uses: actions/cache@v3
        with:
          path: ${{ inputs.project }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', inputs.project)) }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        working-directory: ${{ inputs.project }}
        run: |
          if [ "$ACT_EXECUTION" = "true" ]; then
            echo "Running in act - optimized install"
            npm install --prefer-offline --no-audit --no-fund
          else
            npm ci
          fi
      
      # Voice Terminal Hybrid Tests
      - name: Run unit tests (sharded)
        if: matrix.test-suite == 'unit'
        working-directory: voice-terminal-hybrid
        run: |
          if [ "$ACT_EXECUTION" = "true" ]; then
            echo "Running simplified unit tests in act"
            npm run test
          else
            npm run test -- --shard=${{ matrix.shard }}
          fi
      
      - name: Cache Playwright browsers for local execution
        if: github.actor == 'nektos/act' && (contains(matrix.test-suite, 'e2e') || contains(matrix.test-suite, 'accessibility') || contains(matrix.test-suite, 'performance') || contains(matrix.test-suite, 'visual'))
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('voice-terminal-hybrid/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install Playwright
        if: contains(matrix.test-suite, 'e2e') || contains(matrix.test-suite, 'accessibility') || contains(matrix.test-suite, 'performance') || contains(matrix.test-suite, 'visual')
        working-directory: voice-terminal-hybrid
        run: |
          if [ "$ACT_EXECUTION" = "true" ]; then
            echo "Installing minimal browser for act"
            npx playwright install chromium
          else
            npx playwright install --with-deps ${{ matrix.browser }}
          fi
      
      - name: Run E2E tests
        if: matrix.test-suite == 'e2e'
        working-directory: voice-terminal-hybrid
        run: |
          if [ "$ACT_EXECUTION" = "true" ]; then
            echo "Running fast E2E tests for act"
            npm run test:e2e -- --project=chromium --workers=1
          else
            npm run test:e2e -- --project=${{ matrix.browser }}
          fi
      
      - name: Run accessibility tests
        if: matrix.test-suite == 'accessibility' && github.actor != 'nektos/act'
        working-directory: voice-terminal-hybrid
        run: npm run test:accessibility
      
      - name: Run performance tests
        if: matrix.test-suite == 'performance' && github.actor != 'nektos/act'
        working-directory: voice-terminal-hybrid
        run: npm run test:performance
      
      - name: Run visual regression tests
        if: matrix.test-suite == 'visual' && github.actor != 'nektos/act'
        working-directory: voice-terminal-hybrid
        run: npm run test:visual
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
      
      # Electron Shell Tests
      - name: Build Electron app
        if: inputs.project == 'electron-shell'
        working-directory: electron-shell
        run: npm run build
      
      - name: Run Electron tests
        if: inputs.project == 'electron-shell' && matrix.os == 'ubuntu-latest'
        working-directory: electron-shell
        run: |
          if [ "$ACT_EXECUTION" = "true" ]; then
            echo "Running basic Electron tests in act"
            npm test || echo "Tests not yet implemented"
          else
            # Headless testing for Electron
            xvfb-run -a npm test || echo "Tests not yet implemented"
          fi
      
      - name: Upload test results
        if: always() && github.actor != 'nektos/act'
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-suite || matrix.os }}-${{ matrix.shard || matrix.node }}-${{ matrix.browser || matrix.arch }}
          path: |
            ${{ inputs.project }}/test-results/
            ${{ inputs.project }}/coverage/
            ${{ inputs.project }}/playwright-report/
          retention-days: 7
  
  merge-test-results:
    name: Merge Test Results
    needs: parallel-tests
    if: always() && github.actor != 'nektos/act'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results/
      
      - name: Merge coverage reports
        if: inputs.project == 'voice-terminal-hybrid'
        run: |
          npm install -g nyc
          nyc merge all-test-results/*/coverage coverage-merged
          nyc report --reporter=lcov --reporter=text --temp-dir=coverage-merged --report-dir=final-coverage
      
      - name: Upload merged coverage
        if: inputs.project == 'voice-terminal-hybrid'
        uses: codecov/codecov-action@v3
        with:
          directory: ./final-coverage
          flags: ${{ inputs.project }}
      
      - name: Generate test summary
        run: |
          echo "## Test Execution Summary for ${{ inputs.project }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for dir in all-test-results/*/; do
            suite_name=$(basename "$dir")
            if [ -d "$dir" ]; then
              echo "| $suite_name | âœ… |" >> $GITHUB_STEP_SUMMARY
            fi
          done
  
  # Simplified test summary for act execution
  local-test-summary:
    name: Local Test Summary
    needs: parallel-tests
    if: always() && github.actor == 'nektos/act'
    runs-on: ubuntu-latest
    steps:
      - name: Generate local test summary
        run: |
          echo "## Local Test Summary for ${{ inputs.project }}"
          echo "Tests completed in act mode with simplified matrix"
          echo "For full test coverage, run on GitHub Actions"